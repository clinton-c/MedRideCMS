@model MedRideCMS.ViewModels.CustomerViewModels.CustomerPagedResultViewModel
@using MedRideCMS.Models

@{ 
    var pageNavList = Model.GetPageNavigationList(5);
}

<nav aria-label="Search Result Page Navigator">
    <h5>Showing Page @(Model.Page + 1) of @Model.TotalNumPages</h5>
    <ul id="page-nav-list" class="pagination">
        <li>

            <a href="@Url.RouteUrl(new RouteValueDictionary(Model.ReturnRouteValues) { { "Page", Model.FirstPage }, { "SortBy", Model.SortByType } })" aria-label="first-page">
                <span aria-hidden="@(Model.IsFirstPage ? "true" : "false")">&laquo;</span>
            </a>
        </li>
        <li>
            <a href="@Url.RouteUrl(new RouteValueDictionary(Model.ReturnRouteValues) { { "Page", Model.PreviousPage }, { "SortBy", Model.SortByType } })" aria-label="Previous">
                <span aria-hidden="@(Model.IsFirstPage ? "true" : "false")">&lsaquo;</span>
            </a>
        </li>


        @{for (var i = 0; i < pageNavList.Length; i++)
            {
                var isCurrPage = pageNavList[i] == Model.Page ? true : false;

                <li class="@(isCurrPage ? "active" : "")">
                    <a id="@(isCurrPage ? "current-page" : "")" href="@Url.RouteUrl(new RouteValueDictionary(Model.ReturnRouteValues) { { "Page", pageNavList[i] }, { "SortBy", Model.SortByType } })">
                        @(pageNavList[i] + 1)

                        <span class="sr-only">@(isCurrPage ? "(current)" : "")</span>
                    </a>
                </li>
            }
        }


        <li>
            <a href="@Url.RouteUrl(new RouteValueDictionary(Model.ReturnRouteValues) { { "Page", Model.Page < Model.TotalNumPages - 1 ? Model.Page + 1 : Model.Page }, { "SortBy", Model.SortByType } })" aria-label="Next">
                <span aria-hidden="@(Model.PageItems.Count() <= Model.PageSize || Model.Page == Model.TotalNumPages ? "true" : "false")">&rsaquo;</span>
            </a>
        </li>
        <li>
            <a href="@Url.RouteUrl(new RouteValueDictionary(Model.ReturnRouteValues) { { "Page", Model.TotalNumPages - 1 }, { "SortBy", Model.SortByType } })" aria-label="last-page">
                <span aria-hidden="@(Model.PageItems.Count() <= Model.PageSize || Model.Page == Model.TotalNumPages ? "true" : "false")">&raquo;</span>
            </a>
        </li>
    </ul>

</nav>

