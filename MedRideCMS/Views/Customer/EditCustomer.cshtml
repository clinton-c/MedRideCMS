@model MedRideCMS.ViewModels.CustomerViewModels.EditCustomerViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm("Save", "Customer", FormMethod.Post, new { @class = "form-horizontal", autocomplete = "on" }))
{

    <fieldset class="customer-form-fieldset">
        <div class="container">
            <div class="row">
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.FirstName)
                    @Html.LabelFor(m => m.Customer.FirstName, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.FirstName, new { @class = "col-lg-8", value = Model.Customer.FirstName })
                </div>
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.LastName)
                    @Html.LabelFor(m => m.Customer.LastName, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.LastName, new { @class = "col-lg-8", value = Model.Customer.LastName })
                </div>

            </div>

            <div class="row">
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.Address)
                    @Html.LabelFor(m => m.Customer.Address, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.Address, new { @class = "col-lg-8", value = Model.Customer.Address })
                </div>
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.City)
                    @Html.LabelFor(m => m.Customer.City, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.City, new { @class = "col-lg-8", value = Model.Customer.City })
                </div>
            </div>

            <div class="row">
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.StateId)
                    @Html.LabelFor(m => m.Customer.StateId, new { @class = "col-lg-4" })
                    <div class="col-lg-8 state-dropdown-container">
                        @Html.DropDownListFor(m => m.Customer.StateId, new SelectList(Model.States, "Id", "Name"), "Select State", new { @class = "form-control temp input-sm", value = Model.Customer.StateId })
                    </div>
                </div>
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.Zip)
                    @Html.LabelFor(m => m.Customer.Zip, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.Zip, new { @class = "col-lg-8", value = Model.Customer.Zip })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.Phone)
                    @Html.LabelFor(m => m.Customer.Phone, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.Phone, new { @class = "col-lg-8", value = Model.Customer.Phone })
                </div>
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.SecondaryPhone)
                    @Html.LabelFor(m => m.Customer.SecondaryPhone, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.SecondaryPhone, new { @class = "col-lg-8", value = Model.Customer.SecondaryPhone })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-lg-6">
                    @Html.ValidationMessageFor(m => m.Customer.Email)
                    @Html.LabelFor(m => m.Customer.Email, new { @class = "col-lg-4" })
                    @Html.TextBoxFor(m => m.Customer.Email, new { @class = "col-lg-8", value = Model.Customer.Email })
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4"></div>
                <div class="col-lg-4  col-lg-offset-3">

                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Customer.Id)
                    @if (!string.IsNullOrWhiteSpace(Model.ReturnUrl))
                    {
                        @Html.HiddenFor(m => m.ReturnUrl )
                    }

                    <button class="btn btn-success col-md-3">Save</button>

                    @if (!string.IsNullOrWhiteSpace(Model.ReturnUrl))
                    {
                        <a class="btn btn-default col-md-offset-1 col-md-3" href="@Model.ReturnUrl">Cancel</a>
                    }
                    else
                    {
                        @Html.ActionLink("Cancel", "CustomerDetails", "Customer", new { id = Model.Customer.Id }, new { @class = "btn btn-default col-md-offset-1 col-md-3" });
                    }

                    @Html.ActionLink("Delete", "DeleteCustomer", "Customer", new { id = Model.Customer.Id, returnUrl = Model.ReturnUrl }, new { @class= "btn btn-danger col-md-offset-1 col-md-3" })

                </div>
            </div>
        </div>
    </fieldset>
}
