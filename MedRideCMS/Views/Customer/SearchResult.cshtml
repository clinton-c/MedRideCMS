@model MedRideCMS.ViewModels.CustomerSearchResultViewModel

@{
    ViewBag.Title = "SearchResult";

    var pageHandler = Model.PageHandler;
    var pageNavList = pageHandler.GetPageNavigationList(5);

    var firstNameSortToggle = Model.SortByType == MedRideCMS.ViewModels.CustomerSearchResultViewModel.FirstName_Ascending
        ? MedRideCMS.ViewModels.CustomerSearchResultViewModel.FirstName_Descending
        : MedRideCMS.ViewModels.CustomerSearchResultViewModel.FirstName_Ascending;

    var lastNameSortToggle = Model.SortByType == MedRideCMS.ViewModels.CustomerSearchResultViewModel.LastName_Ascending
        ? MedRideCMS.ViewModels.CustomerSearchResultViewModel.LastName_Descending
        : MedRideCMS.ViewModels.CustomerSearchResultViewModel.LastName_Ascending;

    var stateSortToggle = Model.SortByType == MedRideCMS.ViewModels.CustomerSearchResultViewModel.State_Ascending
        ? MedRideCMS.ViewModels.CustomerSearchResultViewModel.State_Descending
        : MedRideCMS.ViewModels.CustomerSearchResultViewModel.State_Ascending;

    var basicRouteValues = new RouteValueDictionary();
    basicRouteValues.Add("FirstName", Model.SearchParams.FirstName);
    basicRouteValues.Add("LastName", Model.SearchParams.LastName);
    basicRouteValues.Add("Address", Model.SearchParams.Address);
    basicRouteValues.Add("City", Model.SearchParams.City);
    basicRouteValues.Add("StateId", Model.SearchParams.StateId);
    basicRouteValues.Add("Zip", Model.SearchParams.Zip);
    basicRouteValues.Add("PageSize", pageHandler.PageSize);
}


<div class="container">


    <h2>Search Results <small>@Html.ActionLink("(Back to Search)", "Index", "Customer", null, new { @class = "btn btn-link" })</small></h2>
    <h4>
        Found @pageHandler.TotalNumItems matches for: <em>"@(Model.SearchParams.ToString())"</em>
    </h4>


    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>

                        @Html.ActionLink("First Name", "Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "SortBy", firstNameSortToggle }, { "Page", pageHandler.Page } }, null)
                    </th>
                    <th>
                        @Html.ActionLink("Last Name", "Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "SortBy", lastNameSortToggle }, { "Page", pageHandler.Page } }, null)
                    </th>

                    <th>Address</th>
                    <th>City</th>
                    <th>
                        @Html.ActionLink("State", "Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "SortBy", stateSortToggle }, { "Page", pageHandler.Page } }, null)
                    </th>

                    <th>Zip</th>
                    <th>Phone</th>
                    <th>Action</th>
                </tr>
            </thead>

            @foreach (var customer in Model.Customers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Address</td>
                    <td>@customer.City</td>
                    <td>@Model.States.SingleOrDefault(s => s.Id == customer.StateId).AbbreviatedName</td>
                    <td>@customer.Zip</td>
                    <td>@customer.Phone</td>
                    <td>
                        @Html.ActionLink("Details", "CustomerDetails", new { id = customer.Id, returnUrl = Model.ReturnUrl })
                        <span>|</span>
                        @Html.ActionLink("Edit", "EditCustomer", new { id = customer.Id, returnUrl = Model.ReturnUrl })
                        <span>|</span>
                        @Html.ActionLink("New Appointment", "EditCustomer", new { id = customer.Id })
                    </td>
                </tr>
            }

        </table>
    </div>

    <nav aria-label="Search Result Page Navigator">
        <h5>Showing Page @(pageHandler.Page + 1) of @pageHandler.TotalNumPages</h5>
        <ul id="page-nav-list" class="pagination">
            <li>

                <a href="@Url.Action("Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "Page", pageHandler.FirstPage }, { "SortBy", Model.SortByType } })" aria-label="first-page">
                    <span aria-hidden="@(pageHandler.IsFirstPage ? "true" : "false")">&laquo;</span>
                </a>
            </li>
            <li>
                <a href="@Url.Action("Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "Page", pageHandler.PreviousPage }, { "SortBy", Model.SortByType } } )" aria-label="Previous">
                    <span aria-hidden="@(pageHandler.IsFirstPage ? "true" : "false")">&lsaquo;</span>
                </a>
            </li>


            @for (var i = 0; i < pageNavList.Length; i++)
            {
                var isCurrPage = pageNavList[i] == pageHandler.Page ? true : false;

                <li class="@(isCurrPage ? "active" : "")">
                    <a id="@(isCurrPage ? "current-page" : "")" href="@Url.Action("Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "Page", pageNavList[i] }, { "SortBy", Model.SortByType } })">
                        @(pageNavList[i] + 1)

                        <span class="sr-only">@(isCurrPage ? "(current)" : "")</span>
                    </a>
                </li>
            }


            <li>
                <a href="@Url.Action("Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "Page", pageHandler.Page < pageHandler.TotalNumPages - 1 ? pageHandler.Page + 1 : pageHandler.Page }, { "SortBy", Model.SortByType } })" aria-label="Next">
                    <span aria-hidden="@(Model.Customers.Count <= pageHandler.PageSize || pageHandler.Page == pageHandler.TotalNumPages ? "true" : "false")">&rsaquo;</span>
                </a>
            </li>
            <li>
                <a href="@Url.Action("Search", "Customer", new RouteValueDictionary(basicRouteValues) { { "Page", pageHandler.TotalNumPages - 1 }, { "SortBy", Model.SortByType } })" aria-label="last-page">
                    <span aria-hidden="@(Model.Customers.Count <= pageHandler.PageSize || pageHandler.Page == pageHandler.TotalNumPages ? "true" : "false")">&raquo;</span>
                </a>
            </li>
        </ul>

    </nav>
</div>



